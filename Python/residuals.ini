# -*- coding: utf-8 -*-
"""
Create a scatterplot of market analysis residuals


Created on Sun Jul  8 15:23:41 2018

@author: User
"""
# Get packages and set gdal
runfile('C:/Users/User/github/PRF-ALTIND/functions.py', wdir='C:/Users/User/github/PRF-ALTIND')
GDAL version:2020300

# Set working directory
import os
os.chdir("G:/my drive/shrum-williams/project")

# In[]:
# Read in model outputs
model_folder = "stata\\outputs\\"
values = glob.glob(model_folder+"*csv")
labels = [path[len(model_folder):] for path in values]
modeloptions = [{"label": labels[i], "value": values[i]} for i in range(len(values))]

# Map type options
maptypes = [{'label':'Light','value':'light'},
            {'label':'Dark','value':'dark'},
            {'label':'Basic','value':'basic'},
            {'label':'Outdoors','value':'outdoors'},
            {'label':'Satellite','value':'satellite'},
            {'label':'Satellite Streets','value':'satellite-streets'}]

# Create DASH application and server
app = dash.Dash(__name__)
app.css.append_css({'external_url': 'https://rawgit.com/WilliamsTravis/PRF-USDM/master/dash-stylesheet.css'})
server = app.server

# Create global chart template
mapbox_access_token = 'pk.eyJ1IjoidHJhdmlzc2l1cyIsImEiOiJjamZiaHh4b28waXNkMnptaWlwcHZvdzdoIn0.9pxpgXxyyhM6qEF_dcyjIQ'

# Map Layout:
# Check this out! https://paulcbauer.shinyapps.io/plotlylayout/
layout = dict(
    autosize=True,
    height=500,
    font=dict(color='#CCCCCC'),
    titlefont=dict(color='#CCCCCC', size='20'),
    margin=dict(
        l=55,
        r=35,
        b=65,
        t=65,
        pad = 4
    ),

    hovermode="closest",
    plot_bgcolor="#eee",
    paper_bgcolor="#083C04",
    legend=dict(font=dict(size=10), orientation='h'),
    title='<b>Potential Payout Frequencies</b>',
    mapbox=dict(
        accesstoken=mapbox_access_token,
        style="satellite-streets",#'light', 'basic', 'outdoors', 'satellite', or 'satellite-streets'
        center=dict(
            lon= -95.7,
            lat= 37.1
        ),
        zoom=2,
    )
)
# In[]:
        
# Page Layout

app.layout = html.Div([
                # Title
                html.Div([
                        
                        html.H1("Model Residuals",
                                className = "twelve columns")
                        ]),
                        
                # Model List   
                html.Div([
                        dcc.Dropdown(id = "models",
                                     options = model_options),
                        ]),
                                # Map Selector
                html.Div([
                        html.P("Map Type"),
                        dcc.Dropdown(
                                id = "map_type",
                                value = "light",
                                options = maptypes, #'light', 'dark','basic', 'outdoors', 'satellite', or 'satellite-streets'   
                                multi = False
                                    )   
                    ],
                    className = 'four columns'
                ),
                        
                # The Graph
                html.Div([
                        dcc.Graph(id = "main_graph")
                         ],
                        className = "twelve columns"
                        ),
                
                ])

# In[]:
                
@app.callback(Output("main_graph","figure"),
              [Input("models","children")])
def makeMap(modelpath):
    # get path from dropdown and read csv
    model = pd.read_csv(modelpath)
    
    
    
    
    
    
    